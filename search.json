[
  {
    "objectID": "exams/midterm.html",
    "href": "exams/midterm.html",
    "title": "Midterm Exam",
    "section": "",
    "text": "Completing the exam in both languages will earn you 20% extra credit on the exam and will also prove that you’re kicking butt in this class.\n\nCreate a folder for this exam on your computer. Name it midterm-lastname-firstname\nSave this file into that folder.\nWhen you are finished with the exam, compile this file. Make sure all of your code runs!\nZip the folder you created (with any necessary file dependencies) and upload this zip file to Canvas."
  },
  {
    "objectID": "exams/midterm.html#instructions",
    "href": "exams/midterm.html#instructions",
    "title": "Midterm Exam",
    "section": "",
    "text": "Completing the exam in both languages will earn you 20% extra credit on the exam and will also prove that you’re kicking butt in this class.\n\nCreate a folder for this exam on your computer. Name it midterm-lastname-firstname\nSave this file into that folder.\nWhen you are finished with the exam, compile this file. Make sure all of your code runs!\nZip the folder you created (with any necessary file dependencies) and upload this zip file to Canvas."
  },
  {
    "objectID": "exams/midterm.html#ground-rules",
    "href": "exams/midterm.html#ground-rules",
    "title": "Midterm Exam",
    "section": "Ground Rules",
    "text": "Ground Rules\n\nYou may use the textbook and the internet (but the normal rules apply - you must be able to explain your answer!)\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc.\nYou may ask clarifying questions of the instructor or TA by email/zoom or in person\nYou may use R or Python for any of these tasks, but your code must be reproducible - I must be able to run your quarto file on my machine. I have provided R chunks in the correct locations in this file - change them to Python if you wish.\nYou should have at least one code chunk for each numbered task below."
  },
  {
    "objectID": "exams/midterm.html#data-description",
    "href": "exams/midterm.html#data-description",
    "title": "Midterm Exam",
    "section": "Data Description",
    "text": "Data Description\nThe data for this exam are taken from the happy dataset in the classdata R package. I’ve exported the data to CSV for you at this link: https://raw.githubusercontent.com/srvanderplas/stat151-homework/main/happy.csv\nNote: You can use this link directly when you read in the data - most commands in R and python will accept URLs as well as file names.\n\nDescription\nThe data is a small sample of variables related to happiness from the general social survey (GSS). The GSS is a yearly cross-sectional survey of Americans, run since 1972. We combine data for more than 25 years to yield over 60 thousand observations, and of the over 5,000 variables, we select some variables that are related to happiness:\n\n\nFormat\nA data frame with 62466 rows and 11 variables\n\n\nDetails\n\nyear. year of the response, 1972 to 2018.\nage. age in years: 18–89 (89 stands for all 89 year olds and older).\ndegree. highest education: lt high school, high school, junior college, bachelor, graduate.\nfinrela. how is your financial status compared to others: far below, below average, average, above average, far above.\nhappy. happiness: very happy, pretty happy, not too happy.\nhealth. health: excellent, good, fair, poor.\nmarital. marital status: married, never married, divorced, widowed, separated.\nsex. sex: female, male.\npolviews. from extremely conservative to extremely liberal.\npartyid. party identification: strong republican, not str republican, ind near rep, independent, ind near dem, not str democrat, strong democrat, other party.\nwtssall. probability weight. 0.39–8.74"
  },
  {
    "objectID": "exams/midterm.html#tasks",
    "href": "exams/midterm.html#tasks",
    "title": "Midterm Exam",
    "section": "Tasks",
    "text": "Tasks\n\nReading in the data\nRead the CSV file using R or python. Store the resulting data in an object named gss.\n\n\nMissing Data\nSome data may be missing. Write code to create a gss_clean data frame that does not have any NAs in the year, age, or happy columns.\nThe na.omit and DataFrame.dropna() functions in R and python may be useful, but you will have to use non-default options; you can also solve this using is.na or isna in R and python plus more basic data frame manipulations.\nHint: Your data frame should have 57523 rows and 13 columns if you’ve done this correctly.\n\n\nTruncate age\nCreate a new column variable, age_dec, in your data frame. This variable must be a column in the gss_clean data frame.\n\nTake the respondent’s age and truncate it to the decade, so that 72 becomes 70 and 89 becomes 1980. A series of logical statements is one way to accomplish this, but it may be more effective to find a numerical function or combination of functions that will do a mathematical calculation instead. floor() and np.floor() in R and python respectively are good places to start.\n\n\nCreate a scatterplot (use geom_point) of age vs decade to show that your approach succeeded.\n\n\n\nVery Happy\n\nCreate a column in the gss_clean data frame, very_happy, that is TRUE (or 1) if the respondent reports being very happy.\n\n\nHow might you use this column to calculate the proportion of very happy people? Explain.\n\nReplace this line with your explanation\n\n\nHappiness of 20-somethings over time\nSuppose that we want to examine how the happiness of 20-somethings changes over time. To do this, we need to have a data set that has the following structure:\n\n\n\nyear\nvery_happy\ncount\n\n\n\n\n1972\n0.279\n369\n\n\n1973\n0.288\n347\n\n\n1974\n0.304\n349\n\n\n\n(these numbers are accurate, so you can use them to check whether you got the correct answer).\n\nHow could you get only responses from 20 year olds? Write code below to generate gss_20, a data frame containing only responses from 20 year olds, across all years of gss_clean.\n\nHint: Your data frame should have 11170 rows and 14 columns.\n\nHow could you get only responses from a single year of the gss_clean data? Write code below to generate gss_20_1972, a data frame containing only responses from 20 year olds in 1972.\n\nHint: Your data frame should have 369 rows and 14 columns.\n\nIf you had a dataset of only responses from 20-year-olds in 1972, how would you calculate very_happy? Using only a simple mathematical function, is it possible to take the work you’ve done so far and calculate this value directly?\n\n\nUse a for loop to iterate through each year, calculating the proportion of very happy 20 year olds.\n\n\nModify your for loop so that you are also calculating the total number of responses from 20 year olds in each year. Copy the code you wrote above into the code chunk here, and modify it in this code chunk (so that I can see what changed).\n\n\nModfiy your for loop so that at the end of each iteration you create a new data structure with one row for the current year, containing values year, very_happy, and count. Copy the code you wrote above into the code chunk here, and modify it in this code chunk (so that I can see what changed).\n\n\nModify your code so that each iteration of the loop appends (sticks on to) the current year’s summary data to an empty data frame created before the loop starts. You can create an empty data frame that you can add new rows to using data.frame() in R or pd.DataFrame() in python.\n\n\nUsing your summary data frame, plot the proportion of very happy 20 year olds for each year in which gss data was collected."
  },
  {
    "objectID": "homework/04-cipher.html",
    "href": "homework/04-cipher.html",
    "title": "Homework 4: Cipher",
    "section": "",
    "text": "Download the starter qmd file here\nThis assignment is modified from the decodeR exercises by Kelly Bodwin and Allison Theobold.\nOnce you finish this assignment, think about how you might decode the message in python. For +5 extra credit, write python code that decodes the message, following the outline of the R code you’ve already written.\nIn this assignment, you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nSome advice:"
  },
  {
    "objectID": "homework/04-cipher.html#part-one-setup",
    "href": "homework/04-cipher.html#part-one-setup",
    "title": "Homework 4: Cipher",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and/or do the desired task incorrectly.\nFind the mistake, and correct it to complete the intended action.\nFor each error, write 1-2 sentences to reflect on what the mistake was and how you found it and fixed it.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", \"\"\", \"(\", \")\", \" \", \"-\", \";\", \":\")\n\nError: &lt;text&gt;:3:56: unexpected string constant\n2: \n3: upper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\"\n                                                          ^\n\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols &lt;- cbind(lower_case, upper_case, punctuation)\n\nError in eval(expr, envir, enclos): object 'lower_case' not found\n\n\n\nTurn the my_symbols vector into a data frame, with the variable name “Symbol”\n\n\nmy_symbols &lt;- dataframe(my_symbols)\n\nError in dataframe(my_symbols): could not find function \"dataframe\"\n\nnames(my_symbols) = Symbol\n\nError in eval(expr, envir, enclos): object 'Symbol' not found\n\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen &lt;- length(my_symbols)\n\nError in eval(expr, envir, enclos): object 'my_symbols' not found\n\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols%Num &lt;- 1:len\n\nError: &lt;text&gt;:1:11: unexpected input\n1: my_symbols%Num &lt;- 1:len\n              ^"
  },
  {
    "objectID": "homework/04-cipher.html#part-two-decoding-the-secret-message.",
    "href": "homework/04-cipher.html#part-two-decoding-the-secret-message.",
    "title": "Homework 4: Cipher",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\ntop_secret &lt;- read.csv(\"https://raw.githubusercontent.com/srvanderplas/unl-stat151/main/homework/04_Secret_Code\", header = FALSE)$V1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nExponentiate every number. (That is, do e1.)\nSquare every number.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17.\n\nTurn your vector of numbers into a matrix with 5 columns.\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\nSubtract the “evens” vector from the first column of your secret message matrix.\nSubtract 100 from all numbers in the 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100.\n\nTake the square root of all numbers in indices 38 to 465.\nRound all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20.\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers."
  },
  {
    "objectID": "homework/04-cipher.html#part-3-the-secret-message",
    "href": "homework/04-cipher.html#part-3-the-secret-message",
    "title": "Homework 4: Cipher",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message!\nGoogle the first line of this message, if you do not recognize it, to see what it is.\nWrite 3-4 sentences about what you learned from this investigation. What problems did you encounter, and how did you solve them?"
  },
  {
    "objectID": "homework/04-cipher.html#footnotes",
    "href": "homework/04-cipher.html#footnotes",
    "title": "Homework 4: Cipher",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nnumber↩︎"
  },
  {
    "objectID": "exams/2023-midterm.html",
    "href": "exams/2023-midterm.html",
    "title": "Practice Midterm",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "exams/2023-midterm.html#instructions",
    "href": "exams/2023-midterm.html#instructions",
    "title": "Practice Midterm",
    "section": "Instructions",
    "text": "Instructions\nCompleting the exam in both languages will earn you 20% extra credit on the exam and will also prove that you’re kicking butt in this class.\n\nCreate a folder for this exam on your computer.\nSave this file into that folder.\nWhen you are finished with the exam, compile the document. Make sure all of your code runs!\nUpload a zip file of your work and any necessary file dependencies to Canvas."
  },
  {
    "objectID": "exams/2023-midterm.html#ground-rules",
    "href": "exams/2023-midterm.html#ground-rules",
    "title": "Practice Midterm",
    "section": "Ground Rules",
    "text": "Ground Rules\n\nYou may use the textbook and the internet (but the normal rules apply - you must be able to explain your answer!)\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc.\nYou may ask clarifying questions of Dr. Vanderplas by email/zoom or in person\nYou may use R or Python for any of these tasks, but your code must be reproducible - I must be able to run your quarto file on my machine. I have provided R chunks in the correct locations in this file - change them to Python if you wish.\nYou should have at least one code chunk for each numbered task below."
  },
  {
    "objectID": "exams/2023-midterm.html#dataset",
    "href": "exams/2023-midterm.html#dataset",
    "title": "Practice Midterm",
    "section": "Dataset",
    "text": "Dataset\nThe data for this exam are taken from the happy dataset in the classdata R package. I’ve exported the data to CSV for you at this link: https://raw.githubusercontent.com/srvanderplas/stat151-homework/main/happy.csv\n\nDescription\nThe data is a small sample of variables related to happiness from the general social survey (GSS). The GSS is a yearly cross-sectional survey of Americans, run since 1972. We combine data for more than 25 years to yield over 60 thousand observations, and of the over 5,000 variables, we select some variables that are related to happiness:\n\n\nFormat\nA data frame with 62466 rows and 11 variables\n\n\nDetails\n\nyear. year of the response, 1972 to 2018.\nage. age in years: 18–89 (89 stands for all 89 year olds and older).\ndegree. highest education: lt high school, high school, junior college, bachelor, graduate.\nfinrela. how is your financial status compared to others: far below, below average, average, above average, far above.\nhappy. happiness: very happy, pretty happy, not too happy.\nhealth. health: excellent, good, fair, poor.\nmarital. marital status: married, never married, divorced, widowed, separated.\nsex. sex: female, male.\npolviews. from extremely conservative to extremely liberal.\npartyid. party identification: strong republican, not str republican, ind near rep, independent, ind near dem, not str democrat, strong democrat, other party.\nwtssall. probability weight. 0.39–8.74"
  },
  {
    "objectID": "exams/2023-midterm.html#tasks",
    "href": "exams/2023-midterm.html#tasks",
    "title": "Practice Midterm",
    "section": "Tasks",
    "text": "Tasks\n\nRead in the data and create a data frame that you will work with for this exam.\nCreate a new column variable, decade, in your data frame.\n\n\nYou will need to take the response year and truncate it to the decade, so that 1972 becomes 1970 and 1989 becomes 1980. You can use a series of logical statements if you want, but it may be more effective to find a numerical function or combination of functions that will perform the operation you want.\nfloor() and math.floor() in R and python respectively are good places to start.\nCreate a scatterplot (use geom_point) of your happy year vs decade to show that your approach succeeded.\n\n\nCreate a new data set by iterating through each year to find the proportion of people who are very happy. Use a for loop. Using your new data frame, plot the proportion of very happy people over time.\nNote: You may have to pass an argument to the mean function to tell it to exclude missing values from the calculation, such as na.rm or skipna. Or, you can remove the NAs from happy using a function like na.omit or dropna, but be careful to only drop rows with an NA in variables we care about, like happy or year.\n\nThe code below provides an example of how to create a summary dataset and handle NAs in R and python. You may modify this code to help you answer part 3.\n\n# Create sample data\ndf &lt;- data.frame(x = c(rnorm(100, 10), rnorm(100, 20)),\n                 y = rep(c(\"Group 1\", \"Group 2\"), each = 100))\n\ndf_means &lt;- data.frame(y = NULL, mean = NULL)\n\n# For each y group, what is the mean of x?\nfor (i in unique(df$y)) {\n  sub_df &lt;- subset(df, y == i)\n  df_means &lt;- rbind(df_means, \n                    data.frame(y = i, mean = mean(sub_df$x, na.rm = T)))\n}\n\ndf_means\n##         y     mean\n## 1 Group 1 10.09352\n## 2 Group 2 20.15375\n\n# Demonstration of na.rm\nmean(c(NA, 1, 2, 3), na.rm = T) # Remove NAs\n## [1] 2\nmean(c(NA, 1, 2, 3), na.rm = F) # Don't remove NAs\n## [1] NA\n\n\nimport pandas as pd\nimport numpy as np\n\n# Create a new data frame\ndf = pd.DataFrame({\n  'y': np.repeat(['Group1', 'Group2'], (100, 100)), \n  'x': np.concatenate((np.random.normal(loc = 10, size = 100), np.random.normal(loc = 12, size = 100)), axis = None)\n  })\n\n# Create an empty dataframe\ndf_means = pd.DataFrame(columns = ['y', 'mean'])\n\n# For each age, how many values?\nfor i in np.unique(df.y):\n  # Create the subset\n  df_sub = df.loc[df.y == i]\n  # Drop NAs from the data frame\n  # This step isn't necessary because mean() uses skipna = T by default\n  # df_sub = df_sub.dropna(subset = ['x', 'y']) \n  # Add a new row to the end of df_means\n  df_means.loc[len(df_means.index)] = [i, df_sub.x.mean()]\n\n\n# Demonstrating skipna parameter of mean\npd.DataFrame({'y':[1, 2, 3, np.nan]}).y.mean(skipna = True)\n## 2.0\npd.DataFrame({'y':[1, 2, 3, np.nan]}).y.mean(skipna = False)\n## nan"
  },
  {
    "objectID": "exams/2023-midterm.html#solutions",
    "href": "exams/2023-midterm.html#solutions",
    "title": "Practice Midterm",
    "section": "Solutions",
    "text": "Solutions\nCopy the list of tasks here and put your code for each task below the task description. Your code should be well commented.\nIf you cannot figure out how to do a task, provide a list of steps that you think are necessary to accomplish that task and provide as much detail in terms of how you would accomplish that in code as possible.\nIf your code does not compile, add , error = T to the chunk header so that the rest of the document will still compile.\n\nRead in the data and create a data frame\n\n\nCreate a new variable, decade\n\n\n\nHappy People per Year"
  },
  {
    "objectID": "homework/03-data-types.html",
    "href": "homework/03-data-types.html",
    "title": "Homework 3: Basic Data Types",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/03-data-types.html#pythagorean-theorem-in-r",
    "href": "homework/03-data-types.html#pythagorean-theorem-in-r",
    "title": "Homework 3: Basic Data Types",
    "section": "Pythagorean Theorem in R",
    "text": "Pythagorean Theorem in R\n\\[a^2 + b^2 = c^2\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), where you set \\(a\\) and \\(b\\) and \\(c\\) is determined mathematically. You may need to find the square root function in R to make this work.\n\n# Your pythagorean theorem code goes here"
  },
  {
    "objectID": "homework/03-data-types.html#quadratic-formula-in-python",
    "href": "homework/03-data-types.html#quadratic-formula-in-python",
    "title": "Homework 3: Basic Data Types",
    "section": "Quadratic Formula in Python",
    "text": "Quadratic Formula in Python\n\\[x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), and then define \\(x1\\) and \\(x2\\), the possible values for \\(x\\).\n\n# Your quadratic formula code goes here"
  },
  {
    "objectID": "homework/03-data-types.html#debugging-practice",
    "href": "homework/03-data-types.html#debugging-practice",
    "title": "Homework 3: Basic Data Types",
    "section": "Debugging practice",
    "text": "Debugging practice\nLook at the data frame below, which contains 3 columns: Name, Salary, and Hire.Year. You’ve read in this data from the data file online and ideally, you want to plot Hire.Year on the x-axis and Salary on the y-axis (code to do this is provided).\nUnfortunately, the data isn’t reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.\nSome things you may want to consider:\n\ngsub\nYou can access columns in a data frame using $: df$col1 will get you col1 of the df object. (We will talk about data frames more next week, but for now, just try to use them)\nYou can access items in a vector using []: x[1] will get you the first item in x\n\nNote: You should be able to identify the problem given what you know about R from this chapter. You may not be able to implement a solution without some additional research, so if you don’t get that far that’s ok.\n\n# This line reads in a tab-separated data file with a header naming the columns\nsalary &lt;- read.table(\"https://raw.githubusercontent.com/srvanderplas/unl-stat151/main/homework/03-data.tsv\",\n                     sep = \"\\t\", header = T)\n\n# This code plots labels for each individual at location (x, y)\nlibrary(ggplot2)\nggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) +\n  geom_label()\n\n\n\n\n\n\n\n# This displays the salary object\nsalary\n\n            Name     Salary Hire.Year\n1  Michael Scott $67,872.00      1995\n2 Dwight Schrute      54000      2001\n3     Pam Beesly      26309      2003\n4    Jim Halpert      59083      1998\n\n\n\nThe problem with the data is:\nHere is how I solved the problem:\n\n# Your implementation code goes here"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "href": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "title": "Stat 151 - Introduction",
    "section": "Introduce yourself!",
    "text": "Introduce yourself!\n\nName / Year / Major\nWhat do you hope to learn in this class?\nPrevious computing experience?\nShould chocolate be considered a vegetable?"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "href": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "title": "Stat 151 - Introduction",
    "section": "My Introduction",
    "text": "My Introduction\n\nSusan Vanderplas\nAssistant Professor in Statistics\nR user for 14 years, Python user for 2.5 years\nDabbled in JavaScript, HTML, C/C++\nI have Prosopagnosia - face blindness\n\n\nMale and Female faces, from Shutterstock"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "href": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "title": "Stat 151 - Introduction",
    "section": "Contact Info",
    "text": "Contact Info\n\nEmail: susan.vanderplas@unl.edu\nOffice: 343D Hardin Hall North Wing\nOffice Hours:\nhttps://calendly.com/drvanderplas/officehours\nSelf-serve, by Zoom unless you specify otherwise.\nMuxin (TA) Office Hours: \n\nhttps://calendly.com/mhua2\nI’ll be in my office (Hardin 349) during the office hours too, feel free to stop by"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "href": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "title": "Stat 151 - Introduction",
    "section": "Course Objectives",
    "text": "Course Objectives\n\n\nBe comfortable using R and/or python for statistical analysis\n\n\n\n\nWrite basic programs using logic including for loops, control structures, and matrix arithmetic\n\n\n\n\nImplement basic data analyses in R or python\n\n\n\n\nDescribe the sequence of logical or mathematical steps necessary to solve a simple problem\n\n\n\n\nBe familiar with good computing practices, such as version control and documentation"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#textbook",
    "href": "slides/01-Syllabus-and-Introductions.html#textbook",
    "title": "Stat 151 - Introduction",
    "section": "Textbook",
    "text": "Textbook\nhttps://srvanderplas.github.io/stat-computing-r-python/"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-materials",
    "href": "slides/01-Syllabus-and-Introductions.html#course-materials",
    "title": "Stat 151 - Introduction",
    "section": "Course Materials",
    "text": "Course Materials\n\n\n\nCanvas\n\nquizzes\nweekly readings\nhomework/exam submission\n\n\n\n\nCourse site\n\nslides\nweekly readings\nhomework/exam descriptions\n\n\nEverything should be cross-linked properly but email me if there’s an issue."
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "href": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "title": "Stat 151 - Introduction",
    "section": "Class Schedule",
    "text": "Class Schedule"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#outline",
    "href": "slides/01-Syllabus-and-Introductions.html#outline",
    "title": "Stat 151 - Introduction",
    "section": "Outline",
    "text": "Outline\nSubject to change based on how much programming you are already familiar with…\n\n\n\nTentative schedule of class topics\n\n\nDate\nTopic\n\n\n\n\nJan 24\nGetting Started\n\n\nJan 31\nScripts & Notebooks\n\n\nFeb 7\nIntro to Programming\n\n\nFeb 14\nData Types\n\n\nFeb 21\nData Structures\n\n\nFeb 28\nControl Structures\n\n\nMar 6\nMidterm Assigned\n\n\nMar 7\nMidterm Due\n\n\nMar 20\nFunctions\n\n\nMar 27\nVersion Control\n\n\nApr 3\nData Visualization\n\n\nApr 10\nData Cleaning\n\n\nApr 17\nStrings\n\n\nApr 24\nReshaping Data\n\n\nMay 1\nGraphics\n\n\nMay 8\nFinal Assigned\n\n\nMay 10\nFinal Due"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#grades",
    "href": "slides/01-Syllabus-and-Introductions.html#grades",
    "title": "Stat 151 - Introduction",
    "section": "Grades",
    "text": "Grades\n\n\n\nAssignments\nWeight\n\n\n\n\nReading Quizzes\n10%\n\n\nWeekly Homework & Participation\n50%\n\n\nMidterm Exam\n20%\n\n\nFinal Exam\n20%\n\n\n\nApproximately Weekly Homework – started in class"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#academic-integrity-submitted-work-policy",
    "href": "slides/01-Syllabus-and-Introductions.html#academic-integrity-submitted-work-policy",
    "title": "Stat 151 - Introduction",
    "section": "Academic Integrity / Submitted Work Policy",
    "text": "Academic Integrity / Submitted Work Policy\n\nYou may (and should!) work with each other on homework assignments\nWork alone on exams\nYou must be able to explain anything you submit\nAt my discretion, I can use a one-on-one discussion of your work to replace the grade for that work.\nChatGPT, StackOverflow, Google are tools, but they do not help you think"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#programming",
    "href": "slides/01-Syllabus-and-Introductions.html#programming",
    "title": "Stat 151 - Introduction",
    "section": "Programming",
    "text": "Programming"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "href": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "title": "Stat 151 - Introduction",
    "section": "Install Course Software",
    "text": "Install Course Software\nTextbook Chapter: https://bit.ly/3JtGCZR"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#next-time",
    "href": "slides/01-Syllabus-and-Introductions.html#next-time",
    "title": "Stat 151 - Introduction",
    "section": "Next Time",
    "text": "Next Time\nWe’ll work on Scripts and Notebooks\nPlease Read before class:\n\nComputer Basics\nScripts and Notebooks\nRStudio’s Interface"
  },
  {
    "objectID": "homework/01-scripts-notebooks.html",
    "href": "homework/01-scripts-notebooks.html",
    "title": "Homework 1: Scripts and Notebooks",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/01-scripts-notebooks.html#what-is-the-difference-between-a-script-and-a-notebook",
    "href": "homework/01-scripts-notebooks.html#what-is-the-difference-between-a-script-and-a-notebook",
    "title": "Homework 1: Scripts and Notebooks",
    "section": "What is the difference between a script and a notebook?",
    "text": "What is the difference between a script and a notebook?\nReplace this paragraph with 2-3 sentences describing your understanding of the difference between a script and a notebook. Your answer should be applicable to R or python (so if you discuss python notebooks, you should also discuss the equivalent in R). Use markdown formatting as described in this cheat-sheet. You may want to provide a table or itemized list, and you should use code formatting to indicate file extensions and programming languages."
  },
  {
    "objectID": "homework/01-scripts-notebooks.html#playing-with-code-in-notebooks",
    "href": "homework/01-scripts-notebooks.html#playing-with-code-in-notebooks",
    "title": "Homework 1: Scripts and Notebooks",
    "section": "Playing with Code in Notebooks",
    "text": "Playing with Code in Notebooks\nThe code chunk below defines a logarithmic spiral. Using this reference, modify the code so that it now plots Fermat’s spiral. Use \\(a = 1\\).\n\n# Define the angle of the spiral (polar coords)\n# go around two full times (2*pi = one revolution)\ntheta &lt;- seq(0, 4*pi, .01) \n# Define the distance from the origin of the spiral\n# Needs to have the same length as theta\nr &lt;- seq(0, 5, length.out = length(theta))\n\n# Now define x and y in cartesian coordinates\nx &lt;- r * cos(theta)\ny &lt;- r * sin(theta)\n\nplot(x, y, type = \"l\")\n\n\n\n\n\n\n\n\nCan you do the same thing in Python? It may help to know that in Python, to raise something to a power, you use ** instead of ^.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the angle of the spiral (polar coords)\n# go around two full times (2*pi = one revolution)\ntheta = np.arange(0, 4 * np.pi, 0.01)\n# Define the distance from the origin of the spiral\n# Needs to have the same length as theta \n# (get length of theta with theta.size, \n#  and then divide 5 by that to get the increment)\nr = np.arange(0, 5, 5/theta.size)\n\n# Now define x and y in cartesian coordinates\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Define the axes\nfig, ax = plt.subplots()\n# Plot the line\nax.plot(x, y)\nplt.show()"
  },
  {
    "objectID": "exams/2023-final.html",
    "href": "exams/2023-final.html",
    "title": "Practice Exam",
    "section": "",
    "text": "You can download all of the files needed for this exam here."
  },
  {
    "objectID": "exams/2023-final.html#rules",
    "href": "exams/2023-final.html#rules",
    "title": "Practice Exam",
    "section": "Rules",
    "text": "Rules\n\nYou may use the textbook, your notes, and google on this exam, but you may not post this exam and ask for help on any site.\nIt is ok to google, for instance, how to convert a string to a list of characters, but it is not ok to google how to solve the entire question. Please ask if you are concerned about any possible edge cases.\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc.\nYou must be able to explain how any code you submit on this exam works.\nYou may ask clarifying questions of Dr. Vanderplas by email/zoom or in person\n(5 points) Your submitted qmd file must compile without errors .\nUse error=TRUE in a chunk if it is supposed to return an error (for instance, if you are demonstrating error handling)."
  },
  {
    "objectID": "exams/2023-final.html#part-1-read-in-and-clean-the-data",
    "href": "exams/2023-final.html#part-1-read-in-and-clean-the-data",
    "title": "Practice Exam",
    "section": "Part 1: Read in and Clean the Data",
    "text": "Part 1: Read in and Clean the Data\n(5 points + 2 bonus)\n\n(2 points) Read in the file scrabble_points.csv and store it in a variable named points.\n\n\n(3 points) What steps do you need to take to get this data into tidy form? Describe the operations, even if you do not know how to perform them yet.\n\n\n\n\n… add more as necessary\n\n\n(2 bonus points) Write code to get your data into tidy form, if you can.\nHint: you may find the function unnest() (R) or df.explode() (Python) useful here."
  },
  {
    "objectID": "exams/2023-final.html#part-2-functions",
    "href": "exams/2023-final.html#part-2-functions",
    "title": "Practice Exam",
    "section": "Part 2: Functions",
    "text": "Part 2: Functions\n(12 points + 2 bonus)\nFor this part, you may find it useful to use the provided file clean_points.csv, which contains the same information as scrabble_points.csv, but in tidy form.\n\n(4 points) Write a function named scrabble_score(x) which will take a word as an argument and determine the point value of that word. Assume that the blank tile is indicated by _.\n\n\nscrabble_score(\"YOU\") # Should return 6 (4 + 1 + 1)\n## Error in scrabble_score(\"YOU\"): could not find function \"scrabble_score\"\nscrabble_score(\"R_CK\") # Should return 9 (1 + 0 + 3 + 5)\n## Error in scrabble_score(\"R_CK\"): could not find function \"scrabble_score\"\n\n\n(2 points) Modify the function you wrote above so that it checks that the input is a string. That is, if someone calls scrabble_score(3), your function should provide an appropriate error.\n\n\nscrabble_score(3)\n## Error in scrabble_score(3): could not find function \"scrabble_score\"\n\n\n(2 points) Modify your function so that it accepts lower-case and upper-case input and treats both the same.\n\n\nscrabble_score(\"AWESOME\") == scrabble_score(\"awEsOme\")\n## Error in scrabble_score(\"AWESOME\"): could not find function \"scrabble_score\"\n\n\n(4 points) Modify your function so that it:\n\nprovides an appropriate warning if the provided string contains a character which is not valid\nremoves any invalid characters from the string before calculating the score\n\n\n\nscrabble_score(\"GOOD LUCK!\")\n## Error in scrabble_score(\"GOOD LUCK!\"): could not find function \"scrabble_score\"\n\n\n(2 bonus) Make your function vectorized, so that you can handle either single characters or a vector of character input.\n\n\nscrabble_score(c(\"You\", \"can\", \"do\", \"this\"))\n## Error in scrabble_score(c(\"You\", \"can\", \"do\", \"this\")): could not find function \"scrabble_score\""
  },
  {
    "objectID": "exams/2023-final.html#part-3-scoring",
    "href": "exams/2023-final.html#part-3-scoring",
    "title": "Practice Exam",
    "section": "Part 3: Scoring",
    "text": "Part 3: Scoring\n(18 points)\n\n(3 points) Create a data frame named scrabble with a column named word containing the words in the file words.txt.\n\n\n(6 points) Add a column, score, to scrabble containing the word score and add another column, length, with the word length.\n\n\n(3 points) Plot word length and word score in an appropriate plot (geom_jitter may be helpful). Make sure your plot has an appropriate title and axis labels. Include any annotations (trend lines, etc.) that you think are helpful for emphasizing important features of the data. If you had trouble with the previous parts, you may use length_score_graph.csv to complete this part.\n\n\n(3 points) Describe the plot’s main features in 2-3 sentences.\n(3 points) What challenges would you face if you plot the score of all 279,498 valid scrabble words in Collins Scrabble Words (2019).txt? What modifications would you consider making to your plot?\nYou do not have to actually plot this additional data, but you may want to try it to see what the problems are."
  },
  {
    "objectID": "homework/11-strings.html",
    "href": "homework/11-strings.html",
    "title": "Homework: Working with strings",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nComplete the following tasks in R or Python.\nThese exercises are stolen from kbodwin’s decodeR repository."
  },
  {
    "objectID": "homework/11-strings.html#setup",
    "href": "homework/11-strings.html#setup",
    "title": "Homework: Working with strings",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\nmessage &lt;- read.csv(\"./message.txt\", stringsAsFactors = FALSE)$Word"
  },
  {
    "objectID": "homework/11-strings.html#warm-up-exercises",
    "href": "homework/11-strings.html#warm-up-exercises",
    "title": "Homework: Working with strings",
    "section": "Warm-up exercises",
    "text": "Warm-up exercises\n\nHow many characters are in the scrambled message?\nHow many of these characters are white space?\nHow many words are in the scrambled message?\nShow all the punctuation marks in the scrambled message.\nPrint out, in all capitals, the longest word in the scrambled message.\nPrint out every piece of a word that starts with the letter “m” and ends with the letter “z” in the scrambled message."
  },
  {
    "objectID": "homework/11-strings.html#decode-a-message",
    "href": "homework/11-strings.html#decode-a-message",
    "title": "Homework: Working with strings",
    "section": "Decode a message",
    "text": "Decode a message\nNow complete the following steps to decode the message:\n\nRemove any spaces before or after each word.\nNo word should be longer than 16 characters. Drop all extra characters off the end of each word.\nAny time you see the word “ugh”, with any number of h’s, followed by a punctuation mark, delete this.\nReplace all instances of exactly 2 a’s with exactly 2 e’s.\nReplace all z’s with t’s.\nEvery word that ends in b, change that to a y. Hint: punctuation!\nEvery word that starts with k, change that to a v. Hint: capitalization!\nUse str_c(str) or ' '.join(map(str, 1)) to recombine all your words into a message.\nFind the movie this quote is from."
  },
  {
    "objectID": "homework/09-data-cleaning.html",
    "href": "homework/09-data-cleaning.html",
    "title": "Homework 9: Data Manipulation",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/09-data-cleaning.html#r-replicate-the-plot",
    "href": "homework/09-data-cleaning.html#r-replicate-the-plot",
    "title": "Homework 9: Data Manipulation",
    "section": "R: Replicate the plot",
    "text": "R: Replicate the plot\nYour first goal (in R) is to get to this graph by breaking down the problem (replicating the graph) into smaller steps that make sense and that you can accomplish piece-by-piece.\n\n\n\nTarget plot to replicate\n\n\n\nProblem Steps\nMake a list of steps that will be necessary to get the data you have into this form.\n\n\nProblem Code\nProvide code that sequentially works through your list of steps to produce the graph. You might put your steps as comments to remind yourself what you’re doing at each point in the code.\n\n# Code for step 1 goes here"
  },
  {
    "objectID": "homework/09-data-cleaning.html#python-replicate-a-different-plot",
    "href": "homework/09-data-cleaning.html#python-replicate-a-different-plot",
    "title": "Homework 9: Data Manipulation",
    "section": "Python: Replicate a (different) plot",
    "text": "Python: Replicate a (different) plot\n\n# Run this if you haven't installed plotnine already\nreticulate::py_install(\"plotnine\")\n\n\nimport pandas as pd\nfrom plotnine import *\n\ngames = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-16/games.csv')\n\n\n\n\nPlot to replicate\n\n\nThis plot shows the 5 games with the most average users in March of 2020. It is ok if you can replicate this plot to the point where the legend doesn’t show up properly, as in this image:\n\n\n\nLegend not quite right\n\n\n\nProblem Steps\nMake a list of steps below that will be necessary to get the data you have into this form.\n\n\nProblem Code\nProvide code that sequentially works through your list of steps to produce the necessary table of games."
  },
  {
    "objectID": "homework/09-data-cleaning.html#r",
    "href": "homework/09-data-cleaning.html#r",
    "title": "Homework 9: Data Manipulation",
    "section": "R",
    "text": "R\n\nmonth.name is a vector containing month names that you can use to create a factor variable. Factor variables can be easily converted into numeric variables. This might help you get a numeric month, which might help you get to a fractional year. Alternately, you can use the match() function to get a numeric month by using match(dataframe$month, month.name).\ndplyr::filter() is a function that will subset a data frame based on a logical condition. It might be easier to use than logical indexing (though you can use either)\nTo get a line graph in ggplot2, use geom_line(). Using aes(color = varname) will color the lines by variable name.\nSome sample code to make a line graph in ggplot is provided below:\n\n\nlibrary(dplyr)\n# Get only january months so that there's one point a year\njan_data &lt;- filter(games, month == \"January\")\n\n# x axis is year, y axis is average players\n# group = gamename says draw one line for each game\nggplot(data = jan_data, \n       aes(x = year, y = avg, group = gamename)) + \n  geom_line()\n\n\n\n\n\n\n\n\nNote that you will need to modify this code to use the correct data frame (that you generate) as well as to e.g. use color."
  },
  {
    "objectID": "homework/09-data-cleaning.html#python",
    "href": "homework/09-data-cleaning.html#python",
    "title": "Homework 9: Data Manipulation",
    "section": "Python",
    "text": "Python\n\nPandas will let you sort a data frame in decreasing order of variable x using sort_values('x', ascending = False)\nYou can select rows of a python data frame that match a list using .isin() demo\nUsing the .assign() function to create new variables will reduce the number of errors you run into. You may be able to get the correct answer without this tip, but if you run into a ‘modify on copy’ or ‘copy on write’ error, consider using .assign().\nSample code to make a line plot in plotnine is provided below:\n\n\n# Get only january months so that there's one point a year\njan_data = games.query('month == \"January\"')\n\n# x axis is year, y axis is average players\n# group = gamename says draw one line for each game\nggplot(jan_data, aes(x =\"year\", y = \"avg\", group = \"gamename\")) + geom_line()\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n\n\n\n\nNote that you will need to modify this code to use the correct data frame (that you generate) as well as to e.g. use color."
  },
  {
    "objectID": "homework/07-github.html",
    "href": "homework/07-github.html",
    "title": "Homework 7: Git and Github",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/07-github.html#course-overview-and-learning-outcomes",
    "href": "homework/07-github.html#course-overview-and-learning-outcomes",
    "title": "Homework 7: Git and Github",
    "section": "🤓 Course overview and learning outcomes",
    "text": "🤓 Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We’ll also provide you with materials for further learning and a few ideas to get you started on our platform. 🚀"
  },
  {
    "objectID": "homework/07-github.html#octocat-git-and-github",
    "href": "homework/07-github.html#octocat-git-and-github",
    "title": "Homework 7: Git and Github",
    "section": ":octocat: Git and GitHub",
    "text": ":octocat: Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you’ve worked on and can easily revert back to an older version if need be. It also makes working with others easier—groups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It’s used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you’re visualizing data or building a new game, there’s a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we’ll dig into the rest later."
  },
  {
    "objectID": "homework/07-github.html#octocat-understanding-the-github-flow",
    "href": "homework/07-github.html#octocat-understanding-the-github-flow",
    "title": "Homework 7: Git and Github",
    "section": ":octocat: Understanding the GitHub flow",
    "text": ":octocat: Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens–think of it as your project folder. It contains all of your project’s files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it’s stored remotely in the ☁️. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read “Cloning a Repository”.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you’re ready to share it. You can make a commit when you have made changes to your project that you want to “checkpoint.” You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g. “Added a README with information about our project”).\nOnce you have a commit or multiple commits that you’re ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you’ll get used to it 🙂"
  },
  {
    "objectID": "homework/07-github.html#github-terms-to-know",
    "href": "homework/07-github.html#github-terms-to-know",
    "title": "Homework 7: Git and Github",
    "section": "💻 GitHub terms to know",
    "text": "💻 GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let’s talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your “GitHub dashboard” helps to easily navigate to your repositories and see useful information about them. Make sure you’re logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. 😄 To learn more about repositories read “Creating, Cloning, and Archiving Repositories and “About README’s”.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository—main. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read “About Branches”.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else’s project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read “Fork a repo”\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read “About Pull Requests”.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this “About Project boards document. You likely won’t need a project board for your assignments, but once you move on to even bigger projects, they’re a great way to organize your team’s work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read “About Issues”.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you’re interested in, the contributions you’ve made, and the conversations you’ve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read “Managing Your Profile README”.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. “Markdown” is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub’s flavor of markdown, read “Basic Writing and Formatting Syntax”.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day—students like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it’s also used as a signal to surface better recommendations on github.com/explore. If you’d like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read “Saving Repositories with Stars”.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read “Following People”.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that … explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/07-github.html#next-steps",
    "href": "homework/07-github.html#next-steps",
    "title": "Homework 7: Git and Github",
    "section": "📝 Next steps",
    "text": "📝 Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‘About_Me.md’. Provide a short biography/introduction for yourself and use markdown formatting (headers, bulleted lists, etc.)\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/07-github.html#resources",
    "href": "homework/07-github.html#resources",
    "title": "Homework 7: Git and Github",
    "section": "📚 Resources",
    "text": "📚 Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub’s Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/07-github.html#optional-extra-steps",
    "href": "homework/07-github.html#optional-extra-steps",
    "title": "Homework 7: Git and Github",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you’ve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What’s your favorite hobby? Learn more about creating your profile README in the document, “Managing Your Profile README”.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn’t like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "slides/11-Data-Cleaning.html#questions-for-you",
    "href": "slides/11-Data-Cleaning.html#questions-for-you",
    "title": "Data cleaning",
    "section": "Questions For You",
    "text": "Questions For You\n\nWhat are the attributes of tidy data?\nWhat are the packages you considered as handy in R/python for data cleaning?\nWhat are the commonly used functions in the package and what are the functions for?"
  },
  {
    "objectID": "slides/11-Data-Cleaning.html#tidy-data",
    "href": "slides/11-Data-Cleaning.html#tidy-data",
    "title": "Data cleaning",
    "section": "Tidy data",
    "text": "Tidy data\n\nEach variable has its own column\nEach observation has its own row\nEach value has its own cell"
  },
  {
    "objectID": "slides/11-Data-Cleaning.html#packages-and-functions",
    "href": "slides/11-Data-Cleaning.html#packages-and-functions",
    "title": "Data cleaning",
    "section": "Packages and Functions",
    "text": "Packages and Functions\n\ndplyr\n\nfilter : operate row wise, filter out unwanted rows or keep the wanted rows\nselect : operate column wise, select wanted columns\nmutate : create a new column\nthere is more…\n\ngroup_by, summarise, stat functions…\n\n\nLubridate\n\nDeal date and time\nPay attention to the data type!!!!\n\nPython and base R are bit more complicated to manipulate the data\n\nlambda function and apply family"
  },
  {
    "objectID": "slides/09-Version-Control.html#git-and-github",
    "href": "slides/09-Version-Control.html#git-and-github",
    "title": "Version Control",
    "section": "Git and Github",
    "text": "Git and Github\n\nGit: keep track of changes\n\ncommit\n“make change and make a comment as a reminder in the future”\n\nGithub: website host git repos\n\nHook up with git to back up your code in cloud\n“Google drive/ One drive”\n\n\nIntroduce yourself to git and setup SSH authentication\nCreate a repository\ncommands\n\ngit add: tell git to track, stage\ngit commit: record the content has been changed\ngit push: update the remote repo\ngit pull: fetch+checkout"
  },
  {
    "objectID": "slides/06-Control-Structures.html#we-have-read",
    "href": "slides/06-Control-Structures.html#we-have-read",
    "title": "Control Structures",
    "section": "We have read",
    "text": "We have read\nControl Structures\n\nConditional: if else\n\nUse logical statement\n\nLoops\n\nwhile loop\n\nUpdate the variable to avoid infinite loop\n\nFor loop\n\nNormally loop over a list\nIterate all the values in the list\n\nSometimes either loop does the work\n\nOther structures:\n\ncase_when in tidyverse (really handy!)\nControl loops: continue/ break/ next …"
  },
  {
    "objectID": "slides/06-Control-Structures.html#homework-5",
    "href": "slides/06-Control-Structures.html#homework-5",
    "title": "Control Structures",
    "section": "Homework 5",
    "text": "Homework 5\n\nDouble check the working directory, so files generated will be read in with the relative path in the following code.\nPython uses indentation to indicate a block of code, but R uses {}"
  },
  {
    "objectID": "slides/04-Basic-Data-Types.html#variables-and-basic-data",
    "href": "slides/04-Basic-Data-Types.html#variables-and-basic-data",
    "title": "Basic Data Types",
    "section": "Variables and Basic Data",
    "text": "Variables and Basic Data\n\nVariables and Basic Data Types\n\nAssigning variables\nvariable types and conversion\n\n\n\nR\nPython\n\n\n\n\nlogical/ boolean\nbool\n\n\ninteger\nint\n\n\nnumeric (different precisions)\nfloat\n\n\ncharacter\nstr"
  },
  {
    "objectID": "slides/04-Basic-Data-Types.html#functions-and-libraries",
    "href": "slides/04-Basic-Data-Types.html#functions-and-libraries",
    "title": "Basic Data Types",
    "section": "Functions and Libraries",
    "text": "Functions and Libraries\n\nUsing Functions and Libraries\n\nMathematical operations\nOperation order follows mathematical rule\nString operation: easier in Python, little bit more work in R paste\nFunctions\n\nTake arguments and mostly have return values\nMethod - special type of function\n\nLibraries/ packages\n\nPackage management:\n\nVirtual environments\ninstalling packages at the user or system level\n\nInstalling packages and loading packages\nPipe\n\nHeavily used in R data manipulation\nNot so much in Python"
  },
  {
    "objectID": "slides/02-Scripts-and-Notebooks.html#raw-content-file",
    "href": "slides/02-Scripts-and-Notebooks.html#raw-content-file",
    "title": "Scripts and Notebooks",
    "section": "Raw content file",
    "text": "Raw content file\nNow you should see something like this, this is the raw file content:"
  },
  {
    "objectID": "slides/02-Scripts-and-Notebooks.html#paste-everything",
    "href": "slides/02-Scripts-and-Notebooks.html#paste-everything",
    "title": "Scripts and Notebooks",
    "section": "Paste Everything",
    "text": "Paste Everything\n\nOpen a quarto document in RStudio\nCopy everything in the raw file content from last step and paste in your quarto document (make sure you paste under the source mode)\nSave the file as 01-Lastname-Firstname.qmd to folder Stat151.\nNow you are ready to do the homework."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 151",
    "section": "",
    "text": "Course Materials\nUse the categories on the right to filter the materials.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nType\n\n\n\n\n\n\n\n\nMay 10, 2024\n\n\nStat 151 Final Exam\n\n\nExam\n\n\n\n\n\n\n\nMay 8, 2024\n\n\nPractice Exam\n\n\nExam\n\n\n\n\n\n\n\nMay 7, 2024\n\n\nHomework Resubmit Deadline\n\n\nHW\n\n\n\n\n\n\n\nMay 3, 2024\n\n\nHomework 12: Graphics 2\n\n\nHW\n\n\n\n\n\n\n\nApr 28, 2024\n\n\nCreating Good Charts\n\n\nreading\n\n\n\n\n\n\n\nApr 26, 2024\n\n\nHomework 10: Data Transformations\n\n\nHW\n\n\n\n\n\n\n\nApr 21, 2024\n\n\nReshaping Data\n\n\nreading\n\n\n\n\n\n\n\nApr 19, 2024\n\n\nHomework: Working with strings\n\n\nHW\n\n\n\n\n\n\n\nApr 17, 2024\n\n\nWorking With Strings\n\n\nslides\n\n\n\n\n\n\n\nApr 14, 2024\n\n\nWorking with Strings (Basic Ops, Converting to Numbers, Separating and Joining Cols)\n\n\nreading\n\n\n\n\n\n\n\nApr 12, 2024\n\n\nHomework 9: Data Manipulation\n\n\nHW\n\n\n\n\n\n\n\nApr 10, 2024\n\n\nData cleaning\n\n\nslides\n\n\n\n\n\n\n\nApr 7, 2024\n\n\nData Cleaning and Manipulation\n\n\nreading\n\n\n\n\n\n\n\nApr 5, 2024\n\n\nHomework 8: Graphics\n\n\nHW\n\n\n\n\n\n\n\nApr 2, 2024\n\n\nData Visualization\n\n\nslides\n\n\n\n\n\n\n\nMar 31, 2024\n\n\nData Visualization Basics\n\n\nreading\n\n\n\n\n\n\n\nMar 31, 2024\n\n\nData Visualization (Intro, Why, Thinking Critically)\n\n\nreading\n\n\n\n\n\n\n\nMar 29, 2024\n\n\nHomework 7: Git and Github\n\n\nHW\n\n\n\n\n\n\n\nMar 27, 2024\n\n\nVersion Control\n\n\nslides\n\n\n\n\n\n\n\nMar 24, 2024\n\n\nGit and GitHub\n\n\nreading\n\n\n\n\n\n\n\nMar 22, 2024\n\n\nHomework 6: FizzBuzz\n\n\nHW\n\n\n\n\n\n\n\nMar 20, 2024\n\n\nWriting Functions\n\n\nslides\n\n\n\n\n\n\n\nMar 17, 2024\n\n\nWriting Functions\n\n\nreading\n\n\n\n\n\n\n\nMar 7, 2024\n\n\n2024 Midterm\n\n\nExam\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nHomework Resubmit Dead line\n\n\nHW\n\n\n\n\n\n\n\nMar 1, 2024\n\n\nTips: Homework 5\n\n\nHW\n\n\n\n\n\n\n\nMar 1, 2024\n\n\nHomework 5: Vectors and Control Structures\n\n\nHW\n\n\n\n\n\n\n\nFeb 28, 2024\n\n\nControl Structures\n\n\nslides\n\n\n\n\n\n\n\nFeb 25, 2024\n\n\nControl Structures\n\n\nreading\n\n\n\n\n\n\n\nFeb 23, 2024\n\n\nHomework 4: Cipher\n\n\nHW\n\n\n\n\n\n\n\nFeb 21, 2024\n\n\nData Structure\n\n\nslides\n\n\n\n\n\n\n\nFeb 18, 2024\n\n\nData Structures\n\n\nreading\n\n\n\n\n\n\n\nFeb 16, 2024\n\n\nHomework 3: Basic Data Types\n\n\nHW\n\n\n\n\n\n\n\nFeb 14, 2024\n\n\nBasic Data Types\n\n\nslides\n\n\n\n\n\n\n\nFeb 11, 2024\n\n\nVariables and Basic Data Types\n\n\nreading\n\n\n\n\n\n\n\nFeb 11, 2024\n\n\nUsing Functions and Libraries\n\n\nreading\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nHomework 2: Finding Your Way in R and Python\n\n\nHW\n\n\n\n\n\n\n\nFeb 7, 2024\n\n\nIntro to Programming\n\n\nslides\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nIntroduction to Programming\n\n\nreading\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nVariables and Basic Data Types\n\n\nreading\n\n\n\n\n\n\n\nFeb 2, 2024\n\n\nHomework 1: Scripts and Notebooks\n\n\nHW\n\n\n\n\n\n\n\nJan 31, 2024\n\n\nScripts and Notebooks\n\n\nslides\n\n\n\n\n\n\n\nJan 28, 2024\n\n\nRStudios interface\n\n\nreading\n\n\n\n\n\n\n\nJan 28, 2024\n\n\nScripts and Notebooks\n\n\nreading\n\n\n\n\n\n\n\nJan 24, 2024\n\n\nStat 151 - Introduction\n\n\nslides\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nSyllabus\n\n\nreading\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nComputer Basics\n\n\nreading\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nSetting Up Your Computer\n\n\nreading\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "homework/02-finding-your-way.html",
    "href": "homework/02-finding-your-way.html",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/02-finding-your-way.html#madlibs",
    "href": "homework/02-finding-your-way.html#madlibs",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "MadLibs",
    "text": "MadLibs\n\nRunning a Python Script at the command line\nRun the script madlibs.py using the terminal to run the script (e.g. type python3 madlibs.py in the terminal). Do what it asks of you. Copy the text after the initial command and paste it between the markings below. (These define a generic, no-language markdown code chunk).\n# Paste your output here!\nCan you run this same script in RStudio using the Source Script button? If you can, please describe any differences you note compared to using the terminal. If you cannot, tell me what happens."
  },
  {
    "objectID": "homework/02-finding-your-way.html#thinking-critically",
    "href": "homework/02-finding-your-way.html#thinking-critically",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Thinking Critically",
    "text": "Thinking Critically\nConsider the counting words examples in the textbook (Your Turn – Terminal Mode, Your Turn – Script Mode). Look at the code, and then at the steps provided for each example. What is different? What is the same? Create a table comparing terminal mode, script mode (e.g. running the whole script using the Run button), and interactive mode. Address the specific differences in how the user interacts with the code, differences in any user inputs (if available) and how they’re specified, and any differences in the output."
  },
  {
    "objectID": "slides/03-Intro-to-Programming.html#homework-1",
    "href": "slides/03-Intro-to-Programming.html#homework-1",
    "title": "Intro to Programming",
    "section": "Homework 1",
    "text": "Homework 1\n\nRemove everything when you create the file \n\nRender and see how it’s working or not working\n\nSave the file! (control+s/ command+s)\nSubmit qmd file\nGrading comments"
  },
  {
    "objectID": "slides/05-Data-Structure.html#homework3",
    "href": "slides/05-Data-Structure.html#homework3",
    "title": "Data Structure",
    "section": "Homework3",
    "text": "Homework3\n\nWrite code and debugging\n\nimport a library, call functions, data conversion, indexing\nObserve from visualizing, printing and reading"
  },
  {
    "objectID": "slides/05-Data-Structure.html#data-structures",
    "href": "slides/05-Data-Structure.html#data-structures",
    "title": "Data Structure",
    "section": "Data Structures",
    "text": "Data Structures\n\nList:\n\nDifferent types in both R and Python\nNested in R, double bracket [[1]]\n\nVector:\n\nSame data type\nc() vs np.array(Not just 1d), pd.series\n\nIndexing with row,column and logical vectors\n\nPython starts at 0!\n\nMatrices\n\n“gathering of vectors” - same type, 2D\nname the columns and row in R, not really in Python (can be done with another object in some other packages)\n\nDataframe\n\nLike a table (what you see in excel): row, columns…\nCommonly used functions: head(), tail(), summary(), dim(), nrow()… There are equivalents in pandas/numpy\n\nMany more ways to manipulate data\n\nCreate a dataframe and read in data as a dataframe"
  },
  {
    "objectID": "slides/05-Data-Structure.html#homework-4",
    "href": "slides/05-Data-Structure.html#homework-4",
    "title": "Data Structure",
    "section": "Homework 4",
    "text": "Homework 4\n\nFollow instructions to decode a secrete message\nTake advantage of Google/Stack overflow… if errors are raised\nNo error raised doesn’t mean it’s correct, print the variable to make sure it is what you are looking for\nCheckpoints make sure you are on the right track\nUse functions/indexing techniques to do checkpoints"
  },
  {
    "objectID": "slides/08-Writing-Functions.html#writing-functions",
    "href": "slides/08-Writing-Functions.html#writing-functions",
    "title": "Writing Functions",
    "section": "Writing functions",
    "text": "Writing functions\n\nSyntax\n\nR: function_name &lt;- function(params){ }\nPython: def(params):\n\nparameter vs argument\n\npassing in more than one arguments\n\nfollow the order of parameters\n(x_, y_) -&gt;func(x, y)\nspecify by parameters\nfunc(x=x_, y = y_)"
  },
  {
    "objectID": "slides/08-Writing-Functions.html#writing-functions-1",
    "href": "slides/08-Writing-Functions.html#writing-functions-1",
    "title": "Writing Functions",
    "section": "Writing functions",
    "text": "Writing functions\n\nInput validation\n\nHandle exceptions\n\ndata type\ninvalid data\n\nstopifnot() and try...except...\n\nScope\n\nLexical scope: the area that is between the braces/ indented region\n“Rewrite”\npython visualizer\nSee a simple function in action"
  },
  {
    "objectID": "slides/08-Writing-Functions.html#homework-6-1",
    "href": "slides/08-Writing-Functions.html#homework-6-1",
    "title": "Writing Functions",
    "section": "Homework 6",
    "text": "Homework 6\n\nprint() function doesn’t have a return value\nPay attention to the data type"
  },
  {
    "objectID": "slides/10-Data-Visualization.html#ggplot",
    "href": "slides/10-Data-Visualization.html#ggplot",
    "title": "Data Visualization",
    "section": "ggplot",
    "text": "ggplot\n\nggplot(data = &lt;DATA&gt;) +        &lt;GEOM&gt;(mapping = aes(&lt;MAPPINGS&gt;),               position = &lt;POSITION&gt;,               stat = &lt;STAT&gt;) +        &lt;FACET&gt; +        &lt;COORD&gt; +        &lt;THEME&gt;Next Time\n\n\n\nData Cleaning"
  },
  {
    "objectID": "slides/12-Working-with-Strings.html#hints-and-clarifications",
    "href": "slides/12-Working-with-Strings.html#hints-and-clarifications",
    "title": "Working With Strings",
    "section": "Hints and Clarifications",
    "text": "Hints and Clarifications\n\nRegular expressions are not necessary all the time\nstringr functions are handy\nstr_view() vs str_view_all()\nStep 3: Any time you see the word “ugh”, with any number of h’s, followed by a punctuation mark, delete this.\n\nugh, ugh! ughh! ughhhh should be deleted\n\nStep 4: Replace all instances of exactly 2 a’s with exactly 2 e’s.\n\n“baa” –&gt; “bee” but nothing should happen to “baaa”\n\nStep 6 Every word that ends in b, change that to a y. Hint: punctuation!\n\neither “b!” or “b” is changed to y, no need to keep punctuation\n\nBy the end of step 7, you should see individual words that make sense."
  },
  {
    "objectID": "homework/08-graphics.html",
    "href": "homework/08-graphics.html",
    "title": "Homework 8: Graphics",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/08-graphics.html#swiss-banknotes",
    "href": "homework/08-graphics.html#swiss-banknotes",
    "title": "Homework 8: Graphics",
    "section": "Swiss Banknotes",
    "text": "Swiss Banknotes\nThe R package mclust contains a data set called banknote, consisting of (physical) measurements on 200 Swiss bank notes, 100 of which are genuine, while the other half is counterfeit. Load this data set (you might have to install the package) using the code below.\n\n# install.packages(\"mclust\")\nlibrary(mclust) # if this throws an error of the form 'there is no package called mclust', uncomment the line above, run it once, then comment the line out again and run the code chunk again.\n## Package 'mclust' version 6.1\n## Type 'citation(\"mclust\")' for citing this R package in publications.\ndata(banknote)\nbanknote$Status &lt;- factor(banknote$Status)\n\n\nbanknote = r.banknote # Copy data from R\n\nFor each of the three figures you create below, write a summary paragraph describing the structure of the plot:\n\nWhat type of plot is it?\nWhich variables are mapped to x, to y, and to the (fill) color?\nWhat is the main message of the plot: what is your main finding, i.e. what do you want viewers to learn from the plot?\nAre there any anomalies or outliers?\n\n\nUse ggplot2 or plotnine to draw a barchart of Status. Map Status to the fill color of the barchart. This will be a relatively boring chart (but that is ok)\nUse ggplot2 or plotnine to draw a histogram of one of the variables in the dataset that shows a distinction between genuine and counterfeit banknotes. Use fill color to show this difference.\nUse ggplot2 or plotnine to draw a scatterplot of two (continuous) measurements, color by Status. Try to find a pair of measurements that allow you to separate perfectly between genuine and counterfeit banknotes."
  },
  {
    "objectID": "homework/10-reshape.html",
    "href": "homework/10-reshape.html",
    "title": "Homework 10: Data Transformations",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nThis week’s assignment uses data from Tidy Tuesday (link) and relates to food consumption and CO2 emissions.\n\n# Credit to Kasia and minorly edited to create output file and test plot\n# Blog post at https://r-tastic.co.uk/post/from-messy-to-tidy/\nlibrary(rvest)\nlibrary(dplyr)\n\nurl &lt;- \"https://www.nu3.de/blogs/nutrition/food-carbon-footprint-index-2018\"\n\n# scrape the website\nurl_html &lt;- read_html(url)\n\n# extract the HTML table\nwhole_table &lt;- url_html %&gt;% \n  html_nodes('table') %&gt;%\n  html_table(fill = TRUE) %&gt;%\n  .[[1]]\n\ntable_content &lt;- whole_table %&gt;%\n  select(-X1) %&gt;% # remove redundant column\n  filter(!dplyr::row_number() %in% 1:3) # remove redundant rows\n\nraw_headers &lt;- url_html %&gt;%\n  html_nodes(\".thead-icon\") %&gt;%\n  html_attr('title')\n\ntidy_bottom_header &lt;- raw_headers[28:length(raw_headers)]\n# tidy_bottom_header[1:10]\n\nraw_middle_header &lt;- raw_headers[17:27]\n# raw_middle_header\n\ntidy_headers &lt;- c(\n  rep(raw_middle_header[1:7], each = 2),\n  \"animal_total\",\n  rep(raw_middle_header[8:length(raw_middle_header)], each = 2),\n  \"non_animal_total\",\n  \"country_total\")\n\n# tidy_headers\n\ncombined_colnames &lt;- paste(tidy_headers, tidy_bottom_header, sep = ';')\ncolnames(table_content) &lt;- c(\"Country\", combined_colnames)\n\ntable_content &lt;- table_content %&gt;%\n  mutate_at(vars(2:26), as.numeric)\n\nThe code above reads the data in from the original webpage and gets it into tabular form.\nYour job is to complete the following tasks:\n\nDescribe the state of the data set, table_content.\n\nWhat are the variables in the data set?\n\nvar1\nvar2\n(add more as necessary)\n\nIs it in tidy form? What principles of tidy data does this violate?\nYour answer here\nWhat steps do you need to take to get it into tidy form?\n\n\n(add more steps as necessary)\n\n\nSketch out what the final (tidy) data set will look like. You can use markdown table syntax or a picture here, but if you use a picture, upload it to imgur and include the image link in this document USING PROPER MARKDOWN SYNTAX.\nWrite R or python code for each step in the process you identified in #1. Show what the data looks like at each step using head(). Each step should be in a different code chunk.\nFor each food type (you may have to remove total values), plot the relationship between Carbon output and Consumption (use facets to get separate plots for each type of food). What do you notice for each plot? If you want to reduce carbon emissions, what foods should you eat less of?\nLook at the plot above again. Do you have any concerns about the data? The data source?"
  },
  {
    "objectID": "homework/12-graphics2.html",
    "href": "homework/12-graphics2.html",
    "title": "Homework 12: Graphics 2",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/12-graphics2.html#take-everything-you-know-and-use-it-for-evil",
    "href": "homework/12-graphics2.html#take-everything-you-know-and-use-it-for-evil",
    "title": "Homework 12: Graphics 2",
    "section": "Take everything you know, and use it for evil",
    "text": "Take everything you know, and use it for evil\nThe textbook spent lots of time showing you how to create different types of graphics, but I spent a lot less time showing you all of the different ways you could customize graphics ggplot2 or plotnine. In this problem, I want you to create the ugliest version of the following graphs you can, and then explain why, exactly, you made the decisions you did, and which principles of good graphics you’ve intentionally violated.\nUgliness is subjective, so the goal here is for you to explore the different ways you can customize the finer details of graphics. Make sure your finished masterpiece has appropriate axis labels and a title (after all, even ugly plots need to be correctly labeled!). You are free to add additional variables and layers, modify the aesthetics used, and leverage other packages. I have provided this code as a starting point, not as a way to limit your creativity.\nI have provided some basic code to get you started. We’ll use the palmerpenguins package, which has fantastic documentation with really awesome artwork.\n\nif (!\"palmerpenguins\" %in% installed.packages()) {\n  remotes::install_github(\"allisonhorst/palmerpenguins\")\n}\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\npenguins = r.penguins\n\n\nUseful References\n\nCustomizing ggplot2 graphics\nA group-created slideshow of awful graphics\nAn example of customizing plots in plotnine"
  },
  {
    "objectID": "exams/2024-final.html",
    "href": "exams/2024-final.html",
    "title": "Stat 151 Final Exam",
    "section": "",
    "text": "This exam is due at 6pm on May 10, 2024. Your exam MUST BE PUSHED TO GITHUB CLASSROOM by 6pm. Please double-check your github repository to ensure that the file that is on github is the file you want me to grade.\nFor each of these problems, you may choose to solve the problem in either R or python.\nThe chunks I’ve provided are R chunks, but you are free to change the code type to python; I just want to ensure that your answers are where I expect them to be.\n\n\n\n\nYou may use the textbook, your notes, and google on this exam, but you may not post this exam and ask for help on any site.\nIt is ok to google, for instance, how to convert a string to a list of characters, but it is not ok to google how to solve the entire question. Please ask if you are concerned about any possible edge cases.\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc. Pre-existing posts on SO are fair game, though.\nYou must be able to explain how any code you submit on this exam works. Oral exams based on your submissions will be held M-W May 13-15 (e.g. during finals week)\nYou may ask clarifying questions of Dr. Vanderplas or Muxin Hua by email/zoom or in person\nThere are a total of 70 points available on this exam.\nIf you get stuck, you may email Dr. Vanderplas for the solution to the problem you are stuck on, at the cost of the points which would be awarded for that problem. Please specify the part and question number, if you decide to use this option. This is designed to get you un-stuck and allow you to complete problems\n(6 points) Your submitted qmd file must compile without errors .\nUse error=TRUE in a chunk if it is supposed to return an error (for instance, if you are demonstrating error handling)."
  },
  {
    "objectID": "exams/2024-final.html#rules",
    "href": "exams/2024-final.html#rules",
    "title": "Stat 151 Final Exam",
    "section": "",
    "text": "You may use the textbook, your notes, and google on this exam, but you may not post this exam and ask for help on any site.\nIt is ok to google, for instance, how to convert a string to a list of characters, but it is not ok to google how to solve the entire question. Please ask if you are concerned about any possible edge cases.\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc. Pre-existing posts on SO are fair game, though.\nYou must be able to explain how any code you submit on this exam works. Oral exams based on your submissions will be held M-W May 13-15 (e.g. during finals week)\nYou may ask clarifying questions of Dr. Vanderplas or Muxin Hua by email/zoom or in person\nThere are a total of 70 points available on this exam.\nIf you get stuck, you may email Dr. Vanderplas for the solution to the problem you are stuck on, at the cost of the points which would be awarded for that problem. Please specify the part and question number, if you decide to use this option. This is designed to get you un-stuck and allow you to complete problems\n(6 points) Your submitted qmd file must compile without errors .\nUse error=TRUE in a chunk if it is supposed to return an error (for instance, if you are demonstrating error handling)."
  },
  {
    "objectID": "exams/2024-final.html#part-1-read-in-and-clean-the-data",
    "href": "exams/2024-final.html#part-1-read-in-and-clean-the-data",
    "title": "Stat 151 Final Exam",
    "section": "Part 1: Read in and Clean the Data",
    "text": "Part 1: Read in and Clean the Data\n(6 points total)\n\n(2 points) Read in the file wordle-words.csv and store the data in a variable named orig. Read in the file guess-words.csv and store the data in a variable named guess.\n\n\n(4 points) Is the orig data in tidy form? Explain - if it is, list the features of tidy data and how this data set meets the requirements. If not, list the features of tidy data this data set violates, and explain what a tidy form of the data would look like."
  },
  {
    "objectID": "exams/2024-final.html#part-2-functions",
    "href": "exams/2024-final.html#part-2-functions",
    "title": "Stat 151 Final Exam",
    "section": "Part 2: Functions",
    "text": "Part 2: Functions\n(24 points total)\nIn this part of the exam, use only the orig words.\nYou may need to write a for loop to check whether each letter is (or is not) in the vector of words. If you start with a vector that has 0 for each word in the list, you can use addition operations to ensure that only words with all of the provided letters are returned.\nIn R, the letters object contains all 26 valid lowercase latin letters.\n\n(4 points) Write a function named filter_yellow(words, x) that uses the words data and a vector of lowercase letters, x, which are in the wordle solution and returns all possible words containing those letters.\n\n\nfilter_yellow(orig, c(\"a\", \"e\", \"i\", \"u\")) \n## Error in filter_yellow(orig, c(\"a\", \"e\", \"i\", \"u\")): could not find function \"filter_yellow\"\n#        word   occurrence day\n# 110   adieu 2.186597e-06  NA\n# 653   aurei 7.694299e-08  NA\n# 11968 uraei 1.093829e-08  NA\n\nfilter_yellow(orig, c(\"q\", \"u\", \"e\", \"y\")) \n## Error in filter_yellow(orig, c(\"q\", \"u\", \"e\", \"y\")): could not find function \"filter_yellow\"\n#       word   occurrence  day\n# 8779 query 8.135131e-06 1495\n# 8782 queyn 5.189541e-10   NA\n# 8783 queys 3.685211e-10   NA\n# 8818 quyte 5.250099e-09   NA\n\n\n(2 points) Modify filter_yellow(words, x) so that the function will return a useful error if the words data frame does not have a column named word.\n(2 points) Modify filter_yellow(words, x) so that the function will return a warning if any characters provided are not letters (A-z), and then will drop the non-letter characters from the vector before returning results using the valid letters.\n(2 points) Modify filter_yellow(words, x) so that the function can accept uppercase or lowercase letters, but will convert the letters to lowercase automatically without an error.\n(4 points) Write a function named filter_black(y) that takes a vector of letters, y, which aren’t in the wordle solution and returns all possible words which do not contain any of those letters. Use the same error handling code that you added in parts 2-4.\n\n\nfilter_black(orig, letters[1:19])\n## Error in filter_black(orig, letters[1:19]): could not find function \"filter_black\"\n# [1] \"tutty\" \"vutty\"\n\nfilter_black(orig, c(\"S\", \"T\", \"C\", \"H\", \"Y\", \"R\", \"P\", \"L\", \"K\", \"G\", \"N\", \"M\", \"D\", \"F\", \"B\", \"W\"))\n## Error in filter_black(orig, c(\"S\", \"T\", \"C\", \"H\", \"Y\", \"R\", \"P\", \"L\", : could not find function \"filter_black\"\n# [1] \"ajiva\" \"aquae\" \"avize\" \"jaxie\" \"jeeze\" \"juvie\" \"ouija\"\n# [8] \"ozzie\" \"qajaq\" \"queue\" \"zoaea\" \"zoeae\" \"zooea\"\n\n\n(4 points) Write a function named filter green(words, letters) that takes a string of 5 letters (with unknowns indicated by _) and returns all words which have the specified letters in the specified position. Add error handling that identifies not-valid characters and flags strings that are not of length 5.\n\n\nfilter_green(orig, z = \"EXA__\")\n## Error in filter_green(orig, z = \"EXA__\"): could not find function \"filter_green\"\n#    word   occurrence day\n# 1 exact 2.450183e-05 139\n# 2 exalt 5.109440e-07 449\n# 3 exams 2.825810e-06  NA\n\nfilter_green(orig, z = \"summer\")\n## Error in filter_green(orig, z = \"summer\"): could not find function \"filter_green\"\n# Error in filter_green(orig, z = \"summer\") : nchar(z) == 5 is not TRUE\n\n\n(4 points) Use your functions to determine what the remaining valid words are in the following situation. Based on the word occurrence frequency, which would you guess first?\nHint: You should be able to chain your functions together with pipes if you’ve set things up as instructed.\n\n\n\n(2 points) How would you improve your functions to make your wordle game better?"
  },
  {
    "objectID": "exams/2024-final.html#part-3-assessing-word-frequency",
    "href": "exams/2024-final.html#part-3-assessing-word-frequency",
    "title": "Stat 151 Final Exam",
    "section": "Part 3: Assessing Word Frequency",
    "text": "Part 3: Assessing Word Frequency\n(12 points total)\n\n(2 points) Join the two data frames of valid wordle words to create a data frame named all_words of all valid words.\n\n\n(2 points) Create a new column in your data frame, solution, that is TRUE for words which are solutions to wordle puzzles, and FALSE for words which are not solutions but are valid guesses.\n\n\n(4 points) Using ggplot2 or plotnine, create side-by-side boxplots which show the frequency of words by solution. You may want to use a transformation (e.g. scale_y_log10())to make these values easier to visualize.\nIf you cannot figure this part out, email Dr. Vanderplas for code at the cost of a deduction of the 4 points you would get for this question.\n\n\n(2 points) Make sure your plot has a title and descriptive axis labels.\n\n\n(2 points) Write at least 2 sentences interpreting the chart you created in part 3."
  },
  {
    "objectID": "exams/2024-final.html#part-4-decoding-wordle-bot",
    "href": "exams/2024-final.html#part-4-decoding-wordle-bot",
    "title": "Stat 151 Final Exam",
    "section": "Part 4: Decoding Wordle-Bot",
    "text": "Part 4: Decoding Wordle-Bot\n(22 points total)\nThe New York Times added Wordle-Bot, which helps analyze your wordle guesses and critique your approach, when it acquired the game from its original creator.\nThis portion of the exam will help you create some of the data you would need to build your own wordle-bot clone.\n\n(2 points) Starting with all_words, the data frame you created for Part 3, create a data frame named answers that contains only words which are wordle solutions.\n\n\n(4 points) Split the letters of the words in the answers data frame into separate columns, so that there is a column for all of the first letters, all of the 2nd letters, and so on. You may find it helpful to first mutate a new column and then use a function such as unnest_wider() to get the data into a form that you can work with. A few lines of the desired data structure is provided below.\nIf you cannot figure this part out, email Dr. Vanderplas for code at the cost of a deduction of the 4 points you would get for this question.\n\n# A tibble: 2,315 × 9\n   word    occurrence   day X1    X2    X3    X4    X5    solution\n   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt;   \n 1 aback 0.00000113    1628 a     b     a     c     k     TRUE    \n 2 abase 0.0000000618   459 a     b     a     s     e     TRUE    \n 3 abate 0.00000104    1781 a     b     a     t     e     TRUE    \n 4 abbey 0.00000143     841 a     b     b     e     y     TRUE    \n\n(4 points) Describe the form of the data you would need in order to compare the relative frequency of each letter in the alphabet by word position (e.g. 1st letter, 2nd letter, 3rd letter…). Feel free to upload and include a sketch using markdown syntax, if it is easier to sketch out the form of the data you would need.\n(4 points) Write code that will take you from the form of the data you got in question 2 to the structure you described in question 3.\n\n\n(2 points) Create a new variable named letter_type that has values vowel and consonant. For the purposes of this question, ‘y’ should be treated as a vowel.\n\n\n(4 points) Create a bar chart with letter on the x-axis and frequency on the y-axis. Facet by position so that your chart has 5 rows and a single column. The bars should be shaded according to letter_type, and your plot should have informative axis labels and a useful title.\n\n\n(2 points) How would you improve this chart so that viewers could more clearly see which letters correspond to each position? Justify your answer, using some of the information on chart perception we discussed in this class."
  },
  {
    "objectID": "homework/05-tips-for-success.html",
    "href": "homework/05-tips-for-success.html",
    "title": "Tips: Homework 5",
    "section": "",
    "text": "Check your compiled file before you submit to make sure it looks the way you want it.\nIf you want to be really sure it works, copy your qmd file to a different folder and compile that… for now, that’s the best way to check that it will work on my machine."
  },
  {
    "objectID": "homework/05-tips-for-success.html#compile-your-file-first",
    "href": "homework/05-tips-for-success.html#compile-your-file-first",
    "title": "Tips: Homework 5",
    "section": "",
    "text": "Check your compiled file before you submit to make sure it looks the way you want it.\nIf you want to be really sure it works, copy your qmd file to a different folder and compile that… for now, that’s the best way to check that it will work on my machine."
  },
  {
    "objectID": "homework/05-tips-for-success.html#images",
    "href": "homework/05-tips-for-success.html#images",
    "title": "Tips: Homework 5",
    "section": "2 Images",
    "text": "2 Images\nImage links must be to the image url, not to the imgur page url\n\n\n\ncaption text goes here\n\n\nCode for this image:\n![caption text goes here](https://i.imgur.com/PKushbR.png){width=50%}\nYou can get this url by right-clicking on the image on the Imgur page and then selecting “Copy image address”:\n\nOther things that don’t work:\n\nIncluding (local) file paths directly (user names changed to protect the innocent):\n\n\\C:\\Users\\person\\Documents\\Flow chart HW5.png\nC:\\Users\\person\\Downloads\\Stat 151\\Excalidraw.png\n\nIncluding (local) file paths in correct image syntax\nExplanation: this works on your machine, but won’t work on mine because I don’t have your file on my machine. You could zip the PNG file and the qmd file up together and submit that, I guess, but it’s easier to follow the directions about imgur (in my opinion).\n\n![](program-flow-map.png)"
  },
  {
    "objectID": "homework/05-tips-for-success.html#yaml-metadata",
    "href": "homework/05-tips-for-success.html#yaml-metadata",
    "title": "Tips: Homework 5",
    "section": "3 YAML metadata",
    "text": "3 YAML metadata\nYAML metadata is the stuff between --- at the top of your document.\n\nYou should have only one set of metadata in your document.\n\nIn this example, you should delete the first set of YAML metadata and only include the second set that has the proper information for the assignment.\n---\ntitle: \"person HW 5\"\nformat: html\neditor: visual\n---\n\n---\ntitle: \"Homework 5: Vectors and Control Structures\"\nauthor: \"person\"\ndate: \"Due: March 3, 2023\"\noutput: \n  html_document:\n    self_contained: yes\n---\n\n\nYAML metadata indentation matters\n\nThis works:\noutput: \n  html_document:\n    self_contained: yes\nThis doesn’t:\noutput: html_document\n  self_contained: yes\nThis works:\n---\ntitle: \"Homework 5: Vectors and Control Structures\"\ndate: \"Due: March 3, 2023\"\noutput: \n  html_document:\n    self_contained: yes\n---\nThis doesn’t:\n---\n  title: \"Homework 5: Vectors and Control Structures\"\ndate: \"Due: March 3, 2023\"\noutput: \n  html_document:\n  self_contained: yes\n---"
  },
  {
    "objectID": "homework/05-tips-for-success.html#quarto-default-template",
    "href": "homework/05-tips-for-success.html#quarto-default-template",
    "title": "Tips: Homework 5",
    "section": "4 Quarto default template",
    "text": "4 Quarto default template\nIt’s totally fine to delete the default quarto information that looks like this from the bottom/top of your file.\nIt’s also totally fine to delete the YAML metadata that comes with that quarto default template. I usually say “Create blank document” or switch to source mode and Ctrl-A (select all) before Ctrl-V (paste) to remove everything that RStudio gives you by default.\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see &lt;https://quarto.org&gt;.\n\n## Running Code\n\nWhen you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n```{r}\n1 + 1\n```\n\nYou can add options to executable code like this\n\n```{r}\n#| echo: false\n2 * 2\n```\n\nThe `echo: false` option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "homework/05-tips-for-success.html#print-only-necessary-output",
    "href": "homework/05-tips-for-success.html#print-only-necessary-output",
    "title": "Tips: Homework 5",
    "section": "5 Print only necessary output",
    "text": "5 Print only necessary output\nI would prefer if you didn’t print out the values of a vector in the code chunks when you submit your file. Comment those out - it’s useful to have them for debugging, but you don’t need them for presentation purposes.\nWhat to do:\n\nx &lt;- as.numeric(x)\n# x # Commented out, so you can uncomment to debug if necessary\n\nWhat not to do:\n\nx &lt;- as.numeric(x)\nx\n\n  [1] 325698 766364 362012 166247 897999 294171 916664 884662 278403 940574\n [11] 106891 381401 849972 897001 226519 828195  91265 753154 588095 457528\n [21] 277275 809052 113874 671162 686489 896904 747724   7053 950898 707745\n [31] 168003 523324 896071 810445 641980 457608 941793  14326 706029 537414\n [41]  55988 910090 506347 526471 962873 317735 762427 638727 425519 388537\n [51] 280629 940575 755803 934680 911933 857272 707581 358178 789662 394281\n [61]   7500 178213 362466 967969 252530 128349 953298 500442 760581 367530\n [71] 871698 127322 190632 637714 365932 776579 969538 916833 254271 692061\n [81] 253268 136396 295048 643919 979193 716806 945620 576969 602211 402003\n [91] 536309 626646 882011  89558 114729 187246 866224 493441 529045 677284"
  },
  {
    "objectID": "homework/05-vectors.html",
    "href": "homework/05-vectors.html",
    "title": "Homework 5: Vectors and Control Structures",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/05-vectors.html#set-up",
    "href": "homework/05-vectors.html#set-up",
    "title": "Homework 5: Vectors and Control Structures",
    "section": "Set-Up",
    "text": "Set-Up\nRunning the following chunk will generate two files and save them to your current working directory.\n\nset.seed(24038243)\n# Generate a vector of data for the problem\nx &lt;- round(runif(100, 0, 1e6))\ny &lt;- round(runif(100, 0, 1e6))\n\n# write it to a file\nwriteLines(as.character(x), con = \"hw5data-r.txt\")\nwriteLines(as.character(y), con = \"hw5data-py.txt\")"
  },
  {
    "objectID": "homework/05-vectors.html#navigation",
    "href": "homework/05-vectors.html#navigation",
    "title": "Homework 5: Vectors and Control Structures",
    "section": "Navigation",
    "text": "Navigation\nThe following problem is inspired by the first problem in the 2021 Advent of Code challenge and as a result is Santa-themed.\nYou’re minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean! Before you know it, you’re inside a submarine the Elves keep ready for situations like this.\nAs the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar sweep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.\nFor example, suppose you had the following report:\n199\n200\n208\n210\n200\n207\n240\n269\n260\n263\nThis report indicates that, scanning outward from the submarine, the sonar sweep found depths of 199, 200, 208, 210, and so on.\nThe first order of business is to figure out how quickly the depth increases, just so you know what you’re dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.\nTo do this, count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:\n199 (N/A - no previous measurement)\n200 (increased)\n208 (increased)\n210 (increased)\n200 (decreased)\n207 (increased)\n240 (increased)\n269 (increased)\n260 (decreased)\n263 (increased)\nIn this example, there are 7 measurements that are larger than the previous measurement.\nHow many measurements are larger than the previous measurement?\n\nPart 1 - Planning the solution\nDraw a program flow map to show how you plan to solve the problem. I used excalidraw.com to draw the maps in the book.\nExport your map to a png, upload it to an image hosting site like imgur, and include the link here. Make sure to link directly to the PNG (right click, get link to image).\n\n\n\nPart 2 - Writing the code\nYou have two files, hw4data-r.txt and hw4data-py.txt. I have provided you with code to read the data in from these files (if they aren’t in your current working directory, run the chunk in the Set-up section, which creates the files).\n\nR\n\nx &lt;- readLines(\"hw5data-r.txt\")\n\n## Solve the problem below this comment\n\n\nnx &lt;- NA # Your answer should be stored in the nx variable to make the line below this chunk work\n\nThere are NA measurements larger than the previous measurement.\n\n\nPython\n\nimport numpy as np\nx = np.loadtxt('hw5data-py.txt')\n\n## Solve the problem below this comment\n\n\nnx2 = 0 # your answer should be stored in the nx variable to make the line below this chunk work\n\nThere are 0 measurements larger than the previous measurement."
  },
  {
    "objectID": "exams/2024-midterm.html",
    "href": "exams/2024-midterm.html",
    "title": "2024 Midterm",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "exams/2024-midterm.html#instructions",
    "href": "exams/2024-midterm.html#instructions",
    "title": "2024 Midterm",
    "section": "Instructions",
    "text": "Instructions\nCompleting the exam in both languages will earn you 20% extra credit on the exam and will also prove that you’re kicking butt in this class.\n\nCreate a folder for this exam on your computer.\nSave this file into that folder.\nWhen you are finished with the exam, compile the document. Make sure all of your code runs!\nUpload a zip file of your work and any necessary file dependencies to Canvas."
  },
  {
    "objectID": "exams/2024-midterm.html#ground-rules",
    "href": "exams/2024-midterm.html#ground-rules",
    "title": "2024 Midterm",
    "section": "Ground Rules",
    "text": "Ground Rules\n\nYou may use the textbook and the internet (but the normal rules apply - you must be able to explain your answer!)\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc.\nYou may ask clarifying questions of Dr. Vanderplas by email/zoom or in person\nYou may use R or Python for any of these tasks, but your code must be reproducible - I must be able to run your quarto file on my machine. I have provided R chunks in the correct locations in this file - change them to Python if you wish.\nYou should have at least one code chunk for each numbered task below."
  },
  {
    "objectID": "exams/2024-midterm.html#dataset",
    "href": "exams/2024-midterm.html#dataset",
    "title": "2024 Midterm",
    "section": "Dataset",
    "text": "Dataset\nThe data for this exam are taken from the happy dataset in the classdata R package. I’ve exported the data to CSV for you at this link: https://raw.githubusercontent.com/srvanderplas/stat151-homework/main/happy.csv\n\nDescription\nThe data is a small sample of variables related to happiness from the general social survey (GSS). The GSS is a yearly cross-sectional survey of Americans, run since 1972. We combine data for more than 25 years to yield over 60 thousand observations, and of the over 5,000 variables, we select some variables that are related to happiness:\n\n\nFormat\nA data frame with 62466 rows and 11 variables\n\n\nDetails\n\nyear. year of the response, 1972 to 2018.\nage. age in years: 18–89 (89 stands for all 89 year olds and older).\ndegree. highest education: lt high school, high school, junior college, bachelor, graduate.\nfinrela. how is your financial status compared to others: far below, below average, average, above average, far above.\nhappy. happiness: very happy, pretty happy, not too happy.\nhealth. health: excellent, good, fair, poor.\nmarital. marital status: married, never married, divorced, widowed, separated.\nsex. sex: female, male.\npolviews. from extremely conservative to extremely liberal.\npartyid. party identification: strong republican, not str republican, ind near rep, independent, ind near dem, not str democrat, strong democrat, other party.\nwtssall. probability weight. 0.39–8.74"
  },
  {
    "objectID": "exams/2024-midterm.html#tasks",
    "href": "exams/2024-midterm.html#tasks",
    "title": "2024 Midterm",
    "section": "Tasks",
    "text": "Tasks\n\nRead in the data and create a data frame that you will work with for this exam.\nCreate a new column variable, decade, in your data frame.\n\n\nYou will need to take the response year and truncate it to the decade, so that 1972 becomes 1970 and 1989 becomes 1980. You can use a series of logical statements if you want, but it may be more effective to find a numerical function or combination of functions that will perform the operation you want.\nfloor() and math.floor() in R and python respectively are good places to start.\nCreate a scatterplot (use geom_point) of your happy year vs decade to show that your approach succeeded.\n\n\nCreate a new data set by iterating through each year to find the proportion of people who are very happy. Use a for loop. Using your new data frame, plot the proportion of very happy people over time.\nNote: You may have to pass an argument to the mean function to tell it to exclude missing values from the calculation, such as na.rm or skipna. Or, you can remove the NAs from happy using a function like na.omit or dropna, but be careful to only drop rows with an NA in variables we care about, like happy or year.\n\nThe code below provides an example of how to create a summary dataset and handle NAs in R and python. You may modify this code to help you answer part 3.\n\n# Create sample data\ndf &lt;- data.frame(x = c(rnorm(100, 10), rnorm(100, 20)),\n                 y = rep(c(\"Group 1\", \"Group 2\"), each = 100))\n\ndf_means &lt;- data.frame(y = NULL, mean = NULL)\n\n# For each y group, what is the mean of x?\nfor (i in unique(df$y)) {\n  sub_df &lt;- subset(df, y == i)\n  df_means &lt;- rbind(df_means, \n                    data.frame(y = i, mean = mean(sub_df$x, na.rm = T)))\n}\n\ndf_means\n##         y     mean\n## 1 Group 1 10.17544\n## 2 Group 2 19.87192\n\n# Demonstration of na.rm\nmean(c(NA, 1, 2, 3), na.rm = T) # Remove NAs\n## [1] 2\nmean(c(NA, 1, 2, 3), na.rm = F) # Don't remove NAs\n## [1] NA\n\n\nimport pandas as pd\nimport numpy as np\n\n# Create a new data frame\ndf = pd.DataFrame({\n  'y': np.repeat(['Group1', 'Group2'], (100, 100)), \n  'x': np.concatenate((np.random.normal(loc = 10, size = 100), np.random.normal(loc = 12, size = 100)), axis = None)\n  })\n\n# Create an empty dataframe\ndf_means = pd.DataFrame(columns = ['y', 'mean'])\n\n# For each age, how many values?\nfor i in np.unique(df.y):\n  # Create the subset\n  df_sub = df.loc[df.y == i]\n  # Drop NAs from the data frame\n  # This step isn't necessary because mean() uses skipna = T by default\n  # df_sub = df_sub.dropna(subset = ['x', 'y']) \n  # Add a new row to the end of df_means\n  df_means.loc[len(df_means.index)] = [i, df_sub.x.mean()]\n\n\n# Demonstrating skipna parameter of mean\npd.DataFrame({'y':[1, 2, 3, np.nan]}).y.mean(skipna = True)\n## 2.0\npd.DataFrame({'y':[1, 2, 3, np.nan]}).y.mean(skipna = False)\n## nan"
  },
  {
    "objectID": "exams/2024-midterm.html#solutions",
    "href": "exams/2024-midterm.html#solutions",
    "title": "2024 Midterm",
    "section": "Solutions",
    "text": "Solutions\nCopy the list of tasks here and put your code for each task below the task description. Your code should be well commented.\nIf you cannot figure out how to do a task, provide a list of steps that you think are necessary to accomplish that task and provide as much detail in terms of how you would accomplish that in code as possible.\nIf your code does not compile, add , error = T to the chunk header so that the rest of the document will still compile.\n\nRead in the data and create a data frame\n\n\nCreate a new variable, decade\n\n\n\nHappy People per Year"
  },
  {
    "objectID": "homework/06-fizzbuzz.html",
    "href": "homework/06-fizzbuzz.html",
    "title": "Homework 6: FizzBuzz",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/06-fizzbuzz.html#program-flow-map-pre-work",
    "href": "homework/06-fizzbuzz.html#program-flow-map-pre-work",
    "title": "Homework 6: FizzBuzz",
    "section": "Program Flow Map – Pre-Work",
    "text": "Program Flow Map – Pre-Work\nCreate a program flow map (on paper, or using an online tool of your choice, such as Excalidraw) showing how FizzBuzz should be evaluated for a given integer x. You do not need to worry about the for loop in this program flow map. Upload your program flow map image to imgur.com and provide an image link here using markdown image syntax. You will need to link directly to the image (with image file extension) - right click on your uploaded image and choose ‘copy image address’ to get the proper link.\n\n\n\nSubstitute picture of a cat\n\n\nA few questions to consider:\n\nCan you think of another way to solve FizzBuzz using a different logical structure?\nWhat do you need to know how to do in R/python for each solution?\n\nDo you need to know how to concatenate strings?\nConvert something from an integer to a string?\nOutput stuff to the command line?\n\n\nThinking through these requirements can help you decide which solution is the simplest and/or best.\nList out the requirements of the solution in your program flow map here:"
  },
  {
    "objectID": "homework/06-fizzbuzz.html#fizzbuzz-for-one",
    "href": "homework/06-fizzbuzz.html#fizzbuzz-for-one",
    "title": "Homework 6: FizzBuzz",
    "section": "Fizzbuzz for one",
    "text": "Fizzbuzz for one\nIn the chunk below, write code which will solve this problem for a single number, x. You should be able to change only the value of x and get the correct answer.\n(Do this in R or python - just pick a language for this assignment. If you choose python, just change the chunk types below.)\n\nx = 20\n\n# Your code goes here"
  },
  {
    "objectID": "homework/06-fizzbuzz.html#fizzbuzz-in-loops",
    "href": "homework/06-fizzbuzz.html#fizzbuzz-in-loops",
    "title": "Homework 6: FizzBuzz",
    "section": "Fizzbuzz in loops",
    "text": "Fizzbuzz in loops\nIn the chunk below, write code which will solve this problem using a for loop that goes from 1 to 30. Store the result of each of the 30 numbers in a character vector instead of printing it out to the command line.\n\n# R code goes here"
  },
  {
    "objectID": "homework/06-fizzbuzz.html#fizzbuzz-in-a-function",
    "href": "homework/06-fizzbuzz.html#fizzbuzz-in-a-function",
    "title": "Homework 6: FizzBuzz",
    "section": "Fizzbuzz in a function",
    "text": "Fizzbuzz in a function\nWrite a FizzBuzz function named fizzbuzz1. Your function should take a single number and return (not print out) a single string evaluating the number that was passed in. Use input validation to ensure that you are given a number, and provide a useful error if you are not given a number as the function argument.\n\n# Your code goes here\n\nThis code will test your fizzbuzz function. Please make sure it runs as you expect it to run before you submit this file to Canvas!\n\nfizzbuzz1(3)\n## Error in fizzbuzz1(3): could not find function \"fizzbuzz1\"\nfizzbuzz1(5)\n## Error in fizzbuzz1(5): could not find function \"fizzbuzz1\"\nfizzbuzz1(7)\n## Error in fizzbuzz1(7): could not find function \"fizzbuzz1\"\nfizzbuzz1(15)\n## Error in fizzbuzz1(15): could not find function \"fizzbuzz1\"\nfizzbuzz1(0)\n## Error in fizzbuzz1(0): could not find function \"fizzbuzz1\"\nfizzbuzz1(\"this should fail\")\n## Error in fizzbuzz1(\"this should fail\"): could not find function \"fizzbuzz1\""
  },
  {
    "objectID": "homework/06-fizzbuzz.html#vectorized-fizzbuzz",
    "href": "homework/06-fizzbuzz.html#vectorized-fizzbuzz",
    "title": "Homework 6: FizzBuzz",
    "section": "Vectorized FizzBuzz",
    "text": "Vectorized FizzBuzz\nWrite a FizzBuzz function named fizzbuzz that can handle a vector of numbers and will return (not print out) a vector of character/string values. Check to ensure the input vector is numeric.\nHint: You might use a loop and call your function from the previous part on each value in the vector.\nThis code will test your fizzbuzz function. Please make sure it runs as you expect it to run before you submit this file to Canvas!\n\nfizzbuzz(c(0, 3, 5, 7, 11, 15))\n## Error in fizzbuzz(c(0, 3, 5, 7, 11, 15)): could not find function \"fizzbuzz\"\n\nfizzbuzz(month.name) # this should fail\n## Error in fizzbuzz(month.name): could not find function \"fizzbuzz\""
  }
]